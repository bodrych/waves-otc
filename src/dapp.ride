{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

@Callable(i)
func makeSell(priceAsset:String, price:Int) = {
    if priceAsset != "WAVES" && !priceAsset.fromBase58String().assetInfo().isDefined() then throw("There is no asset with specified id") else
        if price <= 0 then throw("price must be positive") else
            let payment = i.payment.valueOrErrorMessage("where is payment?")
            if payment.amount <= 0 then throw("amount must be positive") else
                let orderId = "sell_" + toBase58String(i.transactionId)
                let amountAsset = match payment.assetId {
                    case p:ByteVector => p.toBase58String()
                    case _ => "WAVES"
                }
                WriteSet([
                    DataEntry(orderId + "_amount", payment.amount),
                    DataEntry(orderId + "_amount_asset", amountAsset),
                    DataEntry(orderId + "_price", price),
                    DataEntry(orderId + "_price_asset", priceAsset),
                    DataEntry(orderId + "_owner", toBase58String(i.caller.bytes)),
                    DataEntry(orderId + "_spent", 0)
                ])
}

@Callable(i)
func makeBuy(amountAsset:String, price:Int) = {
    if amountAsset != "WAVES" && !amountAsset.fromBase58String().assetInfo().isDefined() then throw("There is no asset with specified id") else
        if price <= 0 then throw("price must be positive") else
            let payment = i.payment.valueOrErrorMessage("where is payment?")
            if payment.amount <= 0 then throw("amount must be positive") else
                let orderId = "buy_" + toBase58String(i.transactionId)
                let priceAsset = match payment.assetId {
                    case p:ByteVector => p.toBase58String()
                    case _ => "WAVES"
                }
                let amountAssetDecimals = if amountAsset == "WAVES" then 8 else amountAsset.fromBase58String().assetInfo().value().decimals
                let buyAmount = payment.amount * pow(10, 0, amountAssetDecimals, 0, 0, CEILING) / price
                if buyAmount == 0 then throw("invalid buy amount") else
                WriteSet([
                    DataEntry(orderId + "_amount", buyAmount),
                    DataEntry(orderId + "_amount_asset", amountAsset),
                    DataEntry(orderId + "_price", price),
                    DataEntry(orderId + "_price_asset", priceAsset),
                    DataEntry(orderId + "_owner", toBase58String(i.caller.bytes)),
                    DataEntry(orderId + "_spent", 0)
                ])
}

@Callable(i)
func takeSell(id:String) = {
    let payment = i.payment.valueOrErrorMessage("where is payment?")
    if payment.amount <= 0 then throw("amount must be positive") else
        let orderId = "sell_" + id
        let paymentAsset = match payment.assetId {
            case p:ByteVector => p.toBase58String()
            case _ => "WAVES"
        }
        let priceAsset = this.getString(orderId + "_price_asset").valueOrErrorMessage("there is no order with specified id")
        if priceAsset != paymentAsset then throw("payment asset must be " + priceAsset) else
            let price = this.getIntegerValue(orderId + "_price")
            let amount = this.getIntegerValue(orderId + "_amount")
            let amountAsset = this.getStringValue(orderId + "_amount_asset")
            let amountAssetDecimals = if amountAsset == "WAVES" then 8 else amountAsset.fromBase58String().assetInfo().value().decimals
            let buyAmount = payment.amount * pow(10, 0, amountAssetDecimals, 0, 0, CEILING) / price
            if buyAmount == 0 then throw("invalid amount") else
            let owner = this.getStringValue(orderId + "_owner").addressFromString().value()
            let spent = this.getIntegerValue(orderId + "_spent")
            if buyAmount > amount - spent then throw("not enougth asset in order") else
            ScriptResult(
                WriteSet([
                    DataEntry(orderId + "_spent", spent + buyAmount)
                ]),
                TransferSet([
                    ScriptTransfer(i.caller, buyAmount, if amountAsset == "WAVES" then unit else amountAsset.fromBase58String()),
                    ScriptTransfer(owner, payment.amount, if priceAsset == "WAVES" then unit else priceAsset.fromBase58String())
                ])
            )
}

@Callable(i)
func takeBuy(id:String) = {
    let payment = i.payment.valueOrErrorMessage("where is payment?")
    if payment.amount <= 0 then throw("amount must be positive") else
        let orderId = "buy_" + id
        let paymentAsset = match payment.assetId {
            case p:ByteVector => p.toBase58String()
            case _ => "WAVES"
        }
        let amountAsset = this.getString(orderId + "_amount_asset").valueOrErrorMessage("there is no order with specified id")
        if amountAsset != paymentAsset then throw("payment asset must be " + amountAsset) else
            let price = this.getIntegerValue(orderId + "_price")
            let amount = this.getIntegerValue(orderId + "_amount")
            let priceAsset = this.getStringValue(orderId + "_price_asset")
            let amountAssetDecimals = if amountAsset == "WAVES" then 8 else amountAsset.fromBase58String().assetInfo().value().decimals
            let priceAmount = payment.amount * price / pow(10, 0, amountAssetDecimals, 0, 0, CEILING)
            if priceAmount == 0 then throw("invalid amount") else
            let owner = this.getStringValue(orderId + "_owner").addressFromString().value()
            let spent = this.getIntegerValue(orderId + "_spent")
            if payment.amount > amount - spent then throw("not enougth asset in order") else
            ScriptResult(
                WriteSet([
                    DataEntry(orderId + "_spent", spent + payment.amount)
                ]),
                TransferSet([
                    ScriptTransfer(i.caller, priceAmount, if priceAsset == "WAVES" then unit else priceAsset.fromBase58String()),
                    ScriptTransfer(owner, payment.amount, if amountAsset == "WAVES" then unit else amountAsset.fromBase58String())
                ])
            )
}

@Callable(i)
func returnBuy(id:String) = {
    let orderId = "buy_" + id
    let owner = this.getStringValue(orderId + "_owner")
    if owner != i.caller.bytes.toBase58String() then throw("return should be called by order owner") else
        let amount = this.getIntegerValue(orderId + "_amount")
        let amountAsset = this.getStringValue(orderId + "_amount_asset")
        let amountAssetDecimals = if amountAsset == "WAVES" then 8 else amountAsset.fromBase58String().assetInfo().value().decimals
        let spent = this.getIntegerValue(orderId + "_spent")
        let price = this.getIntegerValue(orderId + "_price")
        let priceAsset = this.getStringValue(orderId + "_price_asset")
        let returnAmount = (amount - spent) * price / pow(10, 0, amountAssetDecimals, 0, 0, CEILING)
        if returnAmount <= 0 then throw("nothing to return") else
            ScriptResult(
                WriteSet([
                    DataEntry(orderId + "_spent", amount)
                ]),
                TransferSet([
                    ScriptTransfer(i.caller, returnAmount, if priceAsset == "WAVES" then unit else priceAsset.fromBase58String())
                ])
            )
}

@Callable(i)
func returnSell(id:String) = {
    let orderId = "sell_" + id
    let owner = this.getStringValue(orderId + "_owner")
    if owner != i.caller.bytes.toBase58String() then throw("return should be called by order owner") else
        let amount = this.getIntegerValue(orderId + "_amount")
        let amountAsset = this.getStringValue(orderId + "_amount_asset")
        let spent = this.getIntegerValue(orderId + "_spent")
        let returnAmount = amount - spent
        if returnAmount <= 0 then throw("nothing to return") else
            ScriptResult(
                WriteSet([
                    DataEntry(orderId + "_spent", amount)
                ]),
                TransferSet([
                    ScriptTransfer(i.caller, returnAmount, if amountAsset == "WAVES" then unit else amountAsset.fromBase58String())
                ])
            )
}